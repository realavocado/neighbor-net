import { auth } from "./_app";
import {
  Button,
  Container,
  Input,
  Loading,
  Row,
  Spacer,
  Text,
  useInput,
} from "@nextui-org/react";
import Head from "next/head";
import React, { useState } from "react";
import { HiEye, HiEyeOff } from "react-icons/hi";
import { MdEmail, MdLock, MdPerson } from "react-icons/md";
import { useRouter } from "next/router";
import { set } from '@nandorojo/swr-firestore';
import axios from 'axios';

export default function Feed() {
  const router = useRouter();
  const {
    value: nameValue,
    reset: resetNameField,
    bindings: nameBindings,
  } = useInput("");


  const {
    value: emailValue,
    reset: resetEmailField,
    bindings: emailBindings,
  } = useInput("");

  const {
    value: passwordValue,
    reset: resetPasswordField,
    bindings: passwordBindings,
  } = useInput("");
  
  const validateEmail = (value: string) => {
    return value.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i);
  };

  const emailHelper = React.useMemo(() => {
    if (!emailValue)
      return {
        text: "",
        color: "",
      };
    const isValid = validateEmail(emailValue);
    return {
      text: isValid ? "" : "Enter a valid email",
      color: isValid ? "success" : "error",
    };
  }, [emailValue]);

  const nameHelper = React.useMemo(() => {
    return {
      text:
        nameValue.length >= 3 || nameValue.length == 0
          ? ""
          : "Must be at least 3 characters",
    };
  }, [nameValue]);

  const passwordHelper = React.useMemo(() => {
    return {
      text:
        passwordValue.length >= 6 || passwordValue.length == 0
          ? ""
          : "Must be at least 6 characters",
    };
  }, [passwordValue]);

  // const loginHandler = () => {
  //   setLoading(true);
  //   auth
  //     .createUserWithEmailAndPassword(emailValue, passwordValue)
  //     .then((item: { user: { uid: string; }; }) => {
  //       if (item.user?.uid) {
  //         uploadUserData(item.user?.uid)
  //       }
  //     })
  //     .catch((error: any) => {
  //       alert(error);
  //     });
  // };

  const loginHandler = () => {
    setLoading(true);
    axios.post('http://127.0.0.1:8000/users/login/', {
      username: emailValue,
      password: passwordValue,
    })
    .then((response: { data: any; }) => {
      console.log('User logged in:', response.data);
      router.push('/feed');
    })
    .catch((error: { message: any; }) => {
      alert(error.message);
    })
    .finally(() => {
      setLoading(false);
    });
  };

  function uploadUserData(uid: string) {
    set(`users/${auth.currentUser?.uid}`, {
      fullName: nameValue,
      avatarUrl: "https://evascursos.com.br/wp-content/uploads/2020/03/avatar-large-square.jpg"
    })
    Cleanup()
  }

  function Cleanup() {
    resetNameField()
    resetEmailField()
    resetPasswordField()
    setLoading(false)

    router.push('/feed')

  }

  const [loading, setLoading] = useState(false);

  function inputsValid(): boolean {
    if (loading) {
      return false;
    } else if ((emailHelper.color == "success" && passwordValue.length >= 6 && nameValue.length >= 3)) {
      return true;
    } else {
      return false;
    }
  }

  return (
    <>
      <Head>
        <title>Setup | NeighborNet</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <Container xs>
            <Spacer y={2} />
            <Row justify="center">
              <Text h1>Create Account</Text>
            </Row>
            <Spacer y={1} />
            <Input
              {...nameBindings}
              clearable
              bordered
              fullWidth
              shadow={false}
              onClearClick={resetNameField}
              color={"primary"}
              helperColor={"error"}
              helperText={nameHelper.text}
              type="email"
              labelPlaceholder="Name"
              contentLeft={<MdPerson />}
              aria-label="Name Field"
            />
            <Spacer y={2.25} />
            <Input
              {...emailBindings}
              clearable
              bordered
              fullWidth
              shadow={false}
              onClearClick={resetEmailField}
              color={"primary"}
              helperColor={"error"}
              helperText={emailHelper.text}
              type="email"
              labelPlaceholder="Email"
              contentLeft={<MdEmail />}
              aria-label="Email Field"
            />
            <Spacer y={2.25} />
            <Input.Password
              {...passwordBindings}
              clearable
              bordered
              fullWidth
              shadow={false}
              onClearClick={resetPasswordField}
              aria-label="Password Field"
              color="primary"
              labelPlaceholder="Password"
              helperText={passwordHelper.text}
              helperColor="error"
              visibleIcon={<HiEyeOff fill="currentColor" />}
              hiddenIcon={<HiEye fill="currentColor" />}
              contentLeft={<MdLock />}
            />
            <Spacer y={2.25} />
            <Input.Password
              {...passwordBindings}
              clearable
              bordered
              fullWidth
              shadow={false}
              onClearClick={resetPasswordField}
              aria-label="Password Field"
              color="primary"
              labelPlaceholder="Confirm Password"
              helperText={passwordHelper.text}
              helperColor="error"
              visibleIcon={<HiEyeOff fill="currentColor" />}
              hiddenIcon={<HiEye fill="currentColor" />}
              contentLeft={<MdLock />}
            />
            <Spacer y={2.25} />
            <Row justify="center">
              <Button shadow disabled={!inputsValid()} onPress={loginHandler}>
                {loading ? (
                  <Loading type="default" color="currentColor" size="sm" />
                ) : (
                  <>Sign Up</>
                )}
              </Button>
            </Row>
          </Container>
        </div>
      </main>
    </>
  );
}
